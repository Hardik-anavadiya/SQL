QUESTIONS :-

Chapter:- SQL Basics: Data Retrieval - Single Table


1) Write SQL queries for the following:

1. Print all movie titles and release year for all Marvel Studios movies.
2. Print all movies that have Avenger in their name.
3. Print the year when the movie "The Godfather" was released.
4. Print all distinct movie studios in the Bollywood industry.

2) Write SQL queries for the following:

1. Print all movies in the order of their release year (latest first)
2. All movies released in the year 2022
3. Now all the movies released after 2020
4. All movies after the year 2020 that have more than 8 rating
5. Select all movies that are by Marvel studios and Hombale Films
6. Select all THOR movies by their release year
7. Select all movies that are not from Marvel Studios

3) Exercise - Summary analytics (MIN, MAX, AVG, GROUP BY)

1. How many movies were released between 2015 and 2022
2. Print the max and min movie release year
3. Print each year along with the number of movies released in that year, starting from the most recent year

4) Write SQL queries for the following,

1. Print profit % for all the movies




Chapter:- SQL Basics: Data Retrieval - Multiple Tables


1) Write SQL queries for the following,

1. Show all the movies with their language names
2. Show all Telugu movie names (assuming you don't know the language
id for Telugu)
3. Show the language and number of movies released in that language


2) Write SQL queries for the following,

1. Generate a report of all Hindi movies sorted by their revenue amount in millions.
Print movie name, revenue, currency, and unit.



Chapter:- SQL Basics: Complex Queries

1) (SUB QUERY) Write SQL queries for the following, 

1. Select all the movies with minimum and maximum release_year. Note that there
can be more than one movie in min and a max year hence output rows can be more than 2
    
2. Select all the rows from the movies table whose imdb_rating is higher than the average rating

    
2) (CTE) Write SQL queries for the following, 

Select all Hollywood movies released after the year 2000 that made more than 500 million $ profit or more profit. Note that all Hollywood movies have millions as a unit hence you don't need to do the unit conversion. Also, you can write this query without CTE as well but you should try to write this using CTE only






Chapter:- SQL Basics: Database Creation & Updates

1) 








Chapter:- SQL Advanced: Finance Analytics


1) (USER DEFINED FUNCTION ) create a function 'get_fiscal_year' And 'get_fiscal_quater"

2) Generate a yearly report for Croma India where there are two columns

1. Fiscal Year
2. Total Gross Sales amount In that year from Croma










Chapter:- SQL Advanced: Top Customers, Products, Markets


1) ( DATABASE VIEWs) 

Create a view for gross sales. It should have the following columns,

date, fiscal_year, customer_code, customer, market, product_code, product, variant,
sold_quanity, gross_price_per_item, gross_price_total


2) (Stored Procedure)

Write a stored procedure to get the top n products by net sales for a given year. Use product name without a variant.


3) (Window Function)

Retrieve the top 2 markets in every region by their gross sales amount in FY=2021. i.e. result should look something like this,

(  PIC )


4) (WINDOW FUNCTION)

1) Net Sales % Share Global (VISUAL) 

2) Net Sales % share By Region

3) Get Top N Products in each division by their Quantity sold



Chapter:- SQL Advanced: Supply Chain Analytics



1) (CTEs & temporary Table )

Write a query for the below scenario.

The supply chain business manager wants to see which customersâ€™ forecast accuracy has dropped from 2020 to 2021. Provide a complete report with these columns: customer_code, customer_name, market, forecast_accuracy_2020, forecast_accuracy_2021

HINT: You can use the query with CTE that was used to generate a forecast accuracy report in the previous chapter first for 2021 and then for 2020. Then you can use these two tables. You can temporarily cache these tables in a temporary table or another CTE and then perform the join between the two.






SOLUTION :-



Chapter:- SQL Basics: Data Retrieval - Single Table


1)
1) Print all movie titles and release year for all Marvel Studios movies
	
   SELECT title, release_year from movies where studio="Marvel Studios"

2) Print all movies that have Avenger in their name

   SELECT * from movies where title LIKE '%Avenger%'

3) Print the year in which "The Godfather" move was released

   SELECT release_year from movies where title="The Godfather"

4) Print all distinct movie studios on Bollywood industry

   SELECT DISTINCT studio from movies where industry="Bollywood"



2) 

1) print all movies by the order of their release year (latest first)
   
   select * from movies order by release_year desc
   
2) all movies released this year in 2022
   
   select * from movies where release_year=2022  
   
3) ok now all the movies released after 2020

   select * from movies where release_year>2020  
   
4) all movies after year 2020 that has more than 8 rating

   select * from movies where release_year>2020 and imdb_rating>8
   
5) select all movies that are by marvel studios and hombale films

   select * from movies where studio in ("marvel studios", "hombale films")
   
6) select all thor movies by their release year

   select title, release_year from movies 
   where title like '%thor%' order by release_year asc

7) select all movies that are not from marvel studios

   select * from movies where studio!="marvel studios"



3) 


1) how many movies were released between 2015 and 2022

   select 
        count(*)
   from movies 
   where release_year between 2015 and 2022
   
2) print the max and min movie release year

   select 
      min(release_year) as min_year,
      max(release_year) as max_year
   from movies
   
3) print a year and how many movies were released in that year starting with latest year

   select release_year, count(*) as movies_count 
   from movies group by release_year order by release_year desc



4)
1) Print profit % for all the movies 
   
   select 
        *, 
    (revenue-budget) as profit, 
    (revenue-budget)*100/budget as profit_pct 
   from financials
   
   

Chapter:- SQL Basics: Data Retrieval - Multiple Tables


1)
1) Show all the movies with their language names

   SELECT m.title, l.name FROM movies m 
   JOIN languages l USING (language_id)
   
2) Show all Telugu movie names (assuming you don't know language
id for Telugu)
  
   SELECT title	FROM movies m 
   LEFT JOIN languages l 
   ON m.language_id=l.language_id
   WHERE l.name="Telugu"

3) Show language and number of movies released in that language
   	SELECT 
            l.name, 
            COUNT(m.movie_id) as no_movies
	FROM languages l
	LEFT JOIN movies m USING (language_id)        
	GROUP BY language_id
	ORDER BY no_movies DESC;



2) 

1) Generate a report of all Hindi movies sorted by their revenue amount in millions. 
Print movie name, revenue, currency, and unit

	SELECT 
		title, revenue, currency, unit, 
			CASE 
					WHEN unit="Thousands" THEN ROUND(revenue/1000,2)
			WHEN unit="Billions" THEN ROUND(revenue*1000,2)
					ELSE revenue 
			END as revenue_mln
	FROM movies m
	JOIN financials f
			ON m.movie_id=f.movie_id
	JOIN languages l
			ON m.language_id=l.language_id
	WHERE l.name="Hindi"
	ORDER BY revenue_mln DESC



Chapter:- SQL Basics: Complex Queries



1) 
1) select all the movies with minimum and maximum release_year. Note that there 
can be more than one movies in min and max year hence output rows can be more than 2

	select * from movies where release_year in (
        (select min(release_year) from movies),
		(select max(release_year) from movies)
	)
	
2) select all the rows from movies table whose imdb_rating is higher than the average rating

	select * from movies 
	where imdb_rating >  
        (select avg(imdb_rating) from movies);



2)

1) select all hollowood movies released after year 2000 that made more than 500 millions $ 
profit or more profit. Note that all hollywood movies have millions as a unit hence you don't
need to do unit converstion. Also you can write this query without CTE as well but you should
try to write this using CTE only

	with cte as (select title, release_year, (revenue-budget) as profit
			from movies m
			join financials f
			on m.movie_id=f.movie_id
			where release_year>2000 and industry="hollywood"
	)
	select * from cte where profit>500




Chapter:- SQL Basics: Database Creation & Updates










Chapter:- SQL Advanced: Finance Analytics


1)


1) Generate a yearly report for Croma India where there are two columns

	1. Fiscal Year
	2. Total Gross Sales amount In that year from Croma


	select
            get_fiscal_year(date) as fiscal_year,
            sum(round(sold_quantity*g.gross_price,2)) as yearly_sales
	from fact_sales_monthly s
	join fact_gross_price g
	on 
	    g.fiscal_year=get_fiscal_year(s.date) and
	    g.product_code=s.product_code
	where
	    customer_code=90002002
	group by get_fiscal_year(date)
	order by fiscal_year;
		










Chapter:- SQL Advanced: Top Customers, Products, Markets


1) 

1) Create a view for gross sales. It should have the following columns,

	date, fiscal_year, customer_code, customer, market, product_code, product, variant,
	sold_quanity, gross_price_per_item, gross_price_total


	CREATE  VIEW `gross sales` AS
	SELECT 
		s.date,
		s.fiscal_year,
		s.customer_code,
		c.customer,
		c.market,
		s.product_code,
		p.product, p.variant,
		s.sold_quantity,
		g.gross_price as gross_price_per_item,
		round(s.sold_quantity*g.gross_price,2) as gross_price_total
	from fact_sales_monthly s
	join dim_product p
	on s.product_code=p.product_code
	join dim_customer c
	on s.customer_code=c.customer_code
	join fact_gross_price g
	on g.fiscal_year=s.fiscal_year
	and g.product_code=s.product_code;


2)

1) Write a stored procedure to get the top n products by net sales for a given year.  
   Use product name without a variant. Input of stored procedure is fiscal_year and top_n parameter


	CREATE PROCEDURE get_top_n_products_by_net_sales(
              in_fiscal_year int,
              in_top_n int
	)
	BEGIN
            select
                 product,
                 round(sum(net_sales)/1000000,2) as net_sales_mln
            from gdb041.net_sales
            where fiscal_year=in_fiscal_year
            group by product
            order by net_sales_mln desc
            limit in_top_n;
	END

3)

1) Retrieve the top 2 markets in every region by their gross sales amount in FY=2021.


	with cte1 as (
		select
			c.market,
			c.region,
			round(sum(gross_price_total)/1000000,2) as gross_sales_mln
			from gross_sales s
			join dim_customer c
			on c.customer_code=s.customer_code
			where fiscal_year=2021
			group by market
			order by gross_sales_mln desc
		),
		cte2 as (
			select *,
			dense_rank() over(partition by region order by gross_sales_mln desc) as drnk
			from cte1
		)
	select * from cte2 where drnk<=2







Chapter:- SQL Advanced: Supply Chain Analytics


1)
# step 1: Get forecast accuracy of FY 2021 and store that in a temporary table
drop table if exists forecast_accuracy_2021;
create temporary table forecast_accuracy_2021
with forecast_err_table as (
        select
                s.customer_code as customer_code,
                c.customer as customer_name,
                c.market as market,
                sum(s.sold_quantity) as total_sold_qty,
                sum(s.forecast_quantity) as total_forecast_qty,
                sum(s.forecast_quantity-s.sold_quantity) as net_error,
                round(sum(s.forecast_quantity-s.sold_quantity)*100/sum(s.forecast_quantity),1) as net_error_pct,
                sum(abs(s.forecast_quantity-s.sold_quantity)) as abs_error,
                round(sum(abs(s.forecast_quantity-sold_quantity))*100/sum(s.forecast_quantity),2) as abs_error_pct
        from fact_act_est s
        join dim_customer c
        on s.customer_code = c.customer_code
        where s.fiscal_year=2021
        group by customer_code
)
select 
        *,
    if (abs_error_pct > 100, 0, 100.0 - abs_error_pct) as forecast_accuracy
from 
	forecast_err_table
order by forecast_accuracy desc;

# step 2: Get forecast accuracy of FY 2020 and store that also in a temporary table
drop table if exists forecast_accuracy_2020;
create temporary table forecast_accuracy_2020
with forecast_err_table as (
        select
                s.customer_code as customer_code,
                c.customer as customer_name,
                c.market as market,
                sum(s.sold_quantity) as total_sold_qty,
                sum(s.forecast_quantity) as total_forecast_qty,
                sum(s.forecast_quantity-s.sold_quantity) as net_error,
                round(sum(s.forecast_quantity-s.sold_quantity)*100/sum(s.forecast_quantity),1) as net_error_pct,
                sum(abs(s.forecast_quantity-s.sold_quantity)) as abs_error,
                round(sum(abs(s.forecast_quantity-sold_quantity))*100/sum(s.forecast_quantity),2) as abs_error_pct
        from fact_act_est s
        join dim_customer c
        on s.customer_code = c.customer_code
        where s.fiscal_year=2020
        group by customer_code
)
select 
        *,
    if (abs_error_pct > 100, 0, 100.0 - abs_error_pct) as forecast_accuracy
from 
	forecast_err_table
order by forecast_accuracy desc;

-- step 3: Join forecast accuracy tables for 2020 and 2021 using a customer_code
select 
	f_2020.customer_code,
	f_2020.customer_name,
	f_2020.market,
	f_2020.forecast_accuracy as forecast_acc_2020,
	f_2021.forecast_accuracy as forecast_acc_2021
from forecast_accuracy_2020 f_2020
join forecast_accuracy_2021 f_2021
on f_2020.customer_code = f_2021.customer_code 
where f_2021.forecast_accuracy < f_2020.forecast_accuracy
order by forecast_acc_2020 desc;




